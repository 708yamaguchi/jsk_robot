<launch>
  <arg name="launch_moveit" default="true" />
  <arg name="launch_teleop" default="true" />
  <arg name="launch_move_base" default="true" />
  <arg name="boot_sound" default="false" />
  <arg name="map_frame" default="eng2" />
  <arg name="map_file" default="$(find jsk_maps)/raw_maps/eng2-7f-0.05.yaml"/>
  <arg name="keepout_map_file" default="$(find jsk_maps)/raw_maps/eng2-7f-0.05_keepout.yaml" />
  <arg name="use_teb_local_planner" default="true" />

  <param name="robot/type" value="fetch" />
  <param name="robot/name" command='bash -c "hostname | xargs echo -n"' />

  <include file="$(find jsk_fetch_startup)/jsk_fetch.machine" />

  <!-- add jsk startups -->
  <node pkg="jsk_fetch_startup" name="warning" type="warning.py" respawn="true" />
  <node pkg="jsk_fetch_startup" name="nav_speak" type="nav_speak.py" respawn="true" >
    <rosparam>
      lang: japanese
    </rosparam>
  </node>
  <node if="$(arg boot_sound)" pkg="jsk_fetch_startup" name="boot_sound" type="boot_sound.py" />

  <!-- japanese speech node -->
  <include file="$(find voice_text)/launch/voice_text.launch" />

  <!-- Buffer Server -->
  <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen">
    <param name="buffer_size" value="120.0"/>
  </node>

  <!-- logging -->
  <!-- <include file="$(find jsk_fetch_startup)/launch/fetch_lifelog.xml"> -->
  <!--   <arg name="map_frame" value="$(arg map_frame)" /> -->
  <!-- </include> -->

  <!-- startup mongodb server -->
   <include file="$(find jsk_robot_startup)/lifelog/mongodb.launch" >
    <arg name="use_daemon" value="true"/>
    <arg name="port" value="27017" />
    <arg name="repl_set_mode" value="false" />
  </include>

  <!-- base trajecotry logger -->
  <node name="base_trajectory_logger"
        pkg="jsk_robot_startup" type="base_trajectory_logger.py"
        respawn="true" >
    <rosparam subst_value="true">
      update_rate: 1.0
      map_frame: $(arg map_frame)
      robot_frame: base_link
    </rosparam>
  </node>


  <!-- diagnostic aggregator -->
  <node pkg="diagnostic_aggregator" type="aggregator_node"
        name="diag_agg" args="CPP" output="screen" >
    <rosparam command="load" file="$(find jsk_fetch_startup)/config/fetch_analyzers.yaml" />
  </node>

  <!-- publish CPU status to diagnostics -->
  <node name="cpu_monitor" pkg="pr2_computer_monitor" type="cpu_monitor.py"
        args="--diag-hostname=my_machine" >
    <param name="check_ipmi_tool" value="false" type="bool" />
    <param name="enforce_clock_speed" value="false" type="bool" />
    <param name="num_cores" value="-1" type="int" />
    <param name="load1_threshold" value="100.0"/>
    <param name="load5_threshold" value="100.0"/>
  </node>

  <!-- twitter -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_tweet.launch" />

  <!-- app manager -->
  <include file="$(find jsk_robot_startup)/lifelog/app_manager.launch"/>

  <!-- downsample / throttle sensor data -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_sensors.xml" />

  <!-- include fetch moveit -->
  <include file="$(find fetch_moveit_config)/launch/move_group.launch"
           if="$(arg launch_moveit)" />

  <!-- teleop -->
  <include file="$(find jsk_fetch_startup)/launch/fetch_teleop.xml"
           if="$(arg launch_teleop)" />

  <!-- speech recognition -->
  <node name="respeaker_node" pkg="respeaker_ros" type="respeaker_node.py" output="screen" respawn="true"/>
  <node name="static_transformer" pkg="tf" type="static_transform_publisher"
        args="0 0 0.1 0 0 0 head_pan_link respeaker_base 100"/>
  <include file="$(find julius_ros)/launch/julius.launch">
    <arg name="launch_audio_capture" value="false"/>
  </include>

  <group if="$(arg launch_move_base)">
    <!-- jsk_maps -->
    <include file="$(find jsk_maps)/launch/start_map_$(arg map_frame).launch">
      <arg name="launch_map_server" value="false" />
    </include>

    <!-- dock localization -->
    <node pkg="jsk_fetch_startup" type="correct_position.py" name="correct_position" respawn="true" />

    <!-- include fetch_navigation -->
    <include file="$(find fetch_navigation)/launch/fetch_nav.launch" >
      <arg name="map_file" value="$(arg map_file)" />
      <arg name="map_keepout_file" value="$(arg keepout_map_file)" />
      <arg name="use_keepout" value="true" />
    </include>

    <rosparam ns="amcl">
      update_min_a: 0.01 <!-- update filter every 0.01[m] translation -->
      update_min_d: 0.01 <!-- update filter every 0.01[rad] rotation -->
    </rosparam>

    <param unless="$(arg use_teb_local_planner)"
           name="move_base/base_local_planner"
           value="TrajectoryPlannerROS" />
    <param if="$(arg use_teb_local_planner)"
           name="move_base/base_local_planner"
           value="TebLocalPlannerROS" />
    <rosparam ns="move_base"
              file="$(find jsk_fetch_startup)/jsk_fetch_move_base/base_local_planner_params.yaml"
              command="load" />
    <rosparam ns="move_base"
              file="$(find jsk_fetch_startup)/jsk_fetch_move_base/teb_local_planner_params.yaml"
              command="load" />

    <!-- Load common configuration files -->
    <rosparam ns="move_base/local_costmap"
              file="$(find jsk_fetch_startup)/jsk_fetch_move_base/recovery_behaviors.yaml"
              command="load" />

    <!-- Load global navigation specific parameters -->
    <rosparam ns="move_base/global_costmap"
              file="$(find jsk_fetch_startup)/jsk_fetch_move_base/global_costmap_params.yaml"
              command="load" >
    </rosparam>

    <!-- Load local navigation specific parameters -->
    <rosparam ns="move_base/local_costmap"
              file="$(find jsk_fetch_startup)/jsk_fetch_move_base/local_costmap_params.yaml"
              command="load">
    </rosparam>

  </group>
</launch>
